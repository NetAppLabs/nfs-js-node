/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export class JsNfsDirectoryHandleEntries {
  [Symbol.asyncIterator]: AsyncIterableIterator<[string, JsNfsDirectoryHandle | JsNfsFileHandle]>
}
export class JsNfsDirectoryHandleKeys {
  [Symbol.asyncIterator]: AsyncIterableIterator<string>
}
export class JsNfsDirectoryHandleValues {
  [Symbol.asyncIterator]: AsyncIterableIterator<JsNfsDirectoryHandle | JsNfsFileHandle>
}
export class JsNfsHandlePermissionDescriptor {
  mode: 'read' | 'readwrite'
}
export class JsNfsGetDirectoryOptions {
  create: boolean
}
export class JsNfsGetFileOptions {
  create: boolean
}
export class JsNfsRemoveOptions {
  recursive: boolean
}
export class JsNfsCreateWritableOptions {
  keepExistingData: boolean
}
export class JsNfsHandle {
  readonly kind: 'directory' | 'file'
  readonly name: string
  isSameEntry(other: JsNfsHandle): boolean
  queryPermission(perm: JsNfsHandlePermissionDescriptor): Promise<string>
  requestPermission(perm: JsNfsHandlePermissionDescriptor): Promise<string>
}
export class JsNfsDirectoryHandle {
  [Symbol.asyncIterator]: JsNfsDirectoryHandle['entries']
  readonly kind: 'directory'
  readonly name: string
  constructor(url: string)
  toHandle(): JsNfsHandle
  isSameEntry(other: JsNfsHandle): boolean
  queryPermission(perm: JsNfsHandlePermissionDescriptor): Promise<string>
  requestPermission(perm: JsNfsHandlePermissionDescriptor): Promise<string>
  entries(): AsyncIterableIterator<[string, JsNfsDirectoryHandle | JsNfsFileHandle]>
  keys(): AsyncIterableIterator<string>
  values(): AsyncIterableIterator<JsNfsDirectoryHandle | JsNfsFileHandle>
  getDirectoryHandle(name: string, options?: JsNfsGetDirectoryOptions): Promise<JsNfsDirectoryHandle>
  getFileHandle(name: string, options?: JsNfsGetFileOptions): Promise<JsNfsFileHandle>
  removeEntry(name: string, options?: JsNfsRemoveOptions): Promise<void>
  resolve(possibleDescendant: JsNfsHandle): Promise<Array<string> | null>
}
export class JsNfsFileHandle {
  readonly kind: 'file'
  readonly name: string
  toHandle(): JsNfsHandle
  isSameEntry(other: JsNfsHandle): boolean
  queryPermission(perm: JsNfsHandlePermissionDescriptor): Promise<string>
  requestPermission(perm: JsNfsHandlePermissionDescriptor): Promise<string>
  getFile(): Promise<JsNfsFile>
  createWritable(options?: JsNfsCreateWritableOptions): Promise<JsNfsWritableFileStream>
}
export class JsNfsFile {
  readonly size: number
  readonly type: string
  readonly lastModified: number
  readonly name: string
  arrayBuffer(): Promise<ArrayBuffer>
  slice(start?: number, end?: number, contentType?: string): JsNfsBlob
  stream(): ReadableStream<Uint8Array>
  text(): Promise<string>
}
export class JsNfsBlob {
  readonly size: number
  readonly type: string
  arrayBuffer(): Promise<ArrayBuffer>
  slice(start?: number, end?: number, contentType?: string): JsNfsBlob
  stream(): ReadableStream<Uint8Array>
  text(): Promise<string>
}
export class JsNfsWritableFileStream {
  readonly locked: boolean
  write(data: ArrayBuffer | TypedArray | DataView | Blob | String | string | {type: 'write' | 'seek' | 'truncate', data?: ArrayBuffer | TypedArray | DataView | Blob | String | string, position?: number, size?: number}): Promise<void>
  seek(position: number): Promise<void>
  truncate(size: number): Promise<void>
  close(): Promise<void>
  abort(reason: string): Promise<string>
  getWriter(): WritableStreamDefaultWriter
}
