/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface JsNfsHandlePermissionDescriptor {
  mode: 'read' | 'readwrite'
}
export interface JsNfsGetDirectoryOptions {
  create?: boolean
}
export interface JsNfsGetFileOptions {
  create?: boolean
}
export interface JsNfsRemoveOptions {
  recursive?: boolean
}
export interface JsNfsCreateWritableOptions {
  keepExistingData?: boolean
}
export declare class JsNfsDirectoryHandleEntries {
  [Symbol.asyncIterator]: AsyncIterableIterator<[string, JsNfsDirectoryHandle | JsNfsFileHandle]>
}
export declare class JsNfsDirectoryHandleKeys {
  [Symbol.asyncIterator]: AsyncIterableIterator<string>
}
export declare class JsNfsDirectoryHandleValues {
  [Symbol.asyncIterator]: AsyncIterableIterator<JsNfsDirectoryHandle | JsNfsFileHandle>
}
export declare class JsNfsHandle {
  readonly kind: 'directory' | 'file'
  readonly name: string
  isSameEntry(other: JsNfsHandle): boolean
  queryPermission(perm: JsNfsHandlePermissionDescriptor): Promise<string>
  requestPermission(perm: JsNfsHandlePermissionDescriptor): Promise<string>
}
export declare class JsNfsDirectoryHandle {
  [Symbol.asyncIterator]: JsNfsDirectoryHandle['entries']
  readonly kind: 'directory'
  readonly name: string
  constructor(url: string)
  toHandle(): JsNfsHandle
  isSameEntry(other: JsNfsHandle): boolean
  queryPermission(perm: JsNfsHandlePermissionDescriptor): Promise<string>
  requestPermission(perm: JsNfsHandlePermissionDescriptor): Promise<string>
  entries(): AsyncIterableIterator<[string, JsNfsDirectoryHandle | JsNfsFileHandle]>
  keys(): AsyncIterableIterator<string>
  values(): AsyncIterableIterator<JsNfsDirectoryHandle | JsNfsFileHandle>
  getDirectoryHandle(name: string, options?: JsNfsGetDirectoryOptions): Promise<JsNfsDirectoryHandle>
  getFileHandle(name: string, options?: JsNfsGetFileOptions): Promise<JsNfsFileHandle>
  removeEntry(name: string, options?: JsNfsRemoveOptions): Promise<void>
  resolve(possibleDescendant: JsNfsHandle): Promise<Array<string> | null>
}
export declare class JsNfsFileHandle {
  readonly kind: 'file'
  readonly name: string
  toHandle(): JsNfsHandle
  isSameEntry(other: JsNfsHandle): boolean
  queryPermission(perm: JsNfsHandlePermissionDescriptor): Promise<string>
  requestPermission(perm: JsNfsHandlePermissionDescriptor): Promise<string>
  getFile(): Promise<File>
  createWritable(options?: JsNfsCreateWritableOptions): Promise<JsNfsWritableFileStream>
}
export declare class JsNfsFile {
  readonly size: number
  readonly type: string
  readonly lastModified: number
  readonly name: string
  arrayBuffer(): Promise<ArrayBuffer>
  slice(start?: number, end?: number, contentType?: string): Blob
  stream(): ReadableStream<Uint8Array>
  text(): Promise<string>
}
export declare class JsNfsReadableStreamSource {
  readonly type: 'bytes'
  pull(controller: ReadableByteStreamController): void
}
export declare class JsNfsWritableFileStream {
  readonly locked: boolean
  write(
    data:
      | ArrayBuffer
      | ArrayBufferView
      | DataView
      | Blob
      | String
      | string
      | {
          type: 'write' | 'seek' | 'truncate'
          data?: ArrayBuffer | ArrayBufferView | DataView | Blob | String | string
          position?: number
          size?: number
        },
  ): Promise<void>
  seek(position: number): Promise<void>
  truncate(size: number): Promise<void>
  close(): Promise<void>
  abort(reason: string): Promise<string>
  releaseLock(): void
  getWriter(): WritableStreamDefaultWriter
}
export declare class JsNfsWritableStreamSink {
  start(controller?: WritableStreamDefaultController): Promise<void>
  abort(reason: string): Promise<string>
  close(controller?: WritableStreamDefaultController): Promise<void>
  write(chunk: any, controller?: WritableStreamDefaultController): Promise<void>
}
